# Workflow para actualizar herramientas de compresi√≥n y empaquetado

name: Update Compression Tools

on:
  workflow_dispatch:

env:
  TOOLS_DIR: tools

permissions:
  contents: write

jobs:
  update-tools:
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get current and latest versions
        id: versions
        run: |
          Write-Host "üîç Verificando versiones de herramientas..."
          
          # Headers comunes para GitHub API
          $headers = @{
            'Accept' = 'application/vnd.github.v3+json'
            'User-Agent' = 'RealViewOn-UpdateBot'
          }
          
          # Funci√≥n para obtener versi√≥n actual
          function Get-CurrentVersion {
            param($ToolPath, $VersionPattern, $ToolName)
            
            if (Test-Path $ToolPath) {
              try {
                $cmd = if ($ToolName -eq "7zr") { & $ToolPath 2>&1 } else { & $ToolPath --version 2>&1 }
                $output = $cmd | Select-String $VersionPattern | Select-Object -First 1
                if ($output -and $output -match $VersionPattern) {
                  return $matches[1]
                }
              } catch {
                Write-Host "‚ö†Ô∏è Error al obtener versi√≥n de $ToolName : $($_.Exception.Message)"
              }
            }
            return "No encontrado"
          }
          
          # Funci√≥n para obtener √∫ltima versi√≥n de GitHub
          function Get-LatestRelease {
            param($Repo, $AssetPattern, $ToolName)
            
            try {
              $release = Invoke-RestMethod -Uri "https://api.github.com/repos/$Repo/releases/latest" -Headers $headers
              if (-not $release) { return $null }
              
              $version = $release.tag_name -replace '^v', ''
              $asset = $release.assets | Where-Object { $_.name -match $AssetPattern } | Select-Object -First 1
              
              if ($asset) {
                Write-Host "‚úÖ $ToolName v$version encontrado: $($asset.name)"
                return @{
                  Version = $version
                  DownloadUrl = $asset.browser_download_url
                  Found = $true
                }
              } else {
                Write-Host "‚ùå No se encontr√≥ asset compatible para $ToolName"
                return @{ Found = $false }
              }
            } catch {
              Write-Host "‚ùå Error al obtener $ToolName : $($_.Exception.Message)"
              return @{ Found = $false }
            }
          }
          
          # Obtener versiones actuales
          $current7zr = Get-CurrentVersion "${{ env.TOOLS_DIR }}\7zr.exe" "7-Zip.*?(\d+\.\d+)" "7zr"
          $currentUpx = Get-CurrentVersion "${{ env.TOOLS_DIR }}\upx.exe" "upx\s+(\d+\.\d+\.\d+)" "upx"
          
          # Obtener √∫ltimas versiones
          $latest7zr = Get-LatestRelease "ip7z/7zip" "(7zr.*\.exe|7z.*-x64.*\.exe)$" "7-Zip"
          $latestUpx = Get-LatestRelease "upx/upx" "upx-.*-win64\.zip$" "UPX"
          
          Write-Host "üìã Versiones actuales vs disponibles:"
          Write-Host "   7zr.exe: $current7zr vs $($latest7zr.Version)"
          Write-Host "   upx.exe: $currentUpx vs $($latestUpx.Version)"
          
          # Determinar actualizaciones necesarias
          $need7zrUpdate = $latest7zr.Found -and ($current7zr -eq "No encontrado" -or $current7zr -ne $latest7zr.Version)
          $needUpxUpdate = $latestUpx.Found -and ($currentUpx -eq "No encontrado" -or $currentUpx -ne $latestUpx.Version)
          $needAnyUpdate = $need7zrUpdate -or $needUpxUpdate
          
          Write-Host "üìã Actualizaciones necesarias: $(if($needAnyUpdate) { 'S√ç' } else { 'NO' })"
          if ($need7zrUpdate) { Write-Host "   üîÑ 7zr.exe: $current7zr ‚Üí $($latest7zr.Version)" }
          if ($needUpxUpdate) { Write-Host "   üîÑ upx.exe: $currentUpx ‚Üí $($latestUpx.Version)" }
          
          # Guardar outputs
          echo "CURRENT_7ZR_VERSION=$current7zr" >> $env:GITHUB_OUTPUT
          echo "CURRENT_UPX_VERSION=$currentUpx" >> $env:GITHUB_OUTPUT
          echo "LATEST_7ZR_VERSION=$($latest7zr.Version)" >> $env:GITHUB_OUTPUT
          echo "LATEST_UPX_VERSION=$($latestUpx.Version)" >> $env:GITHUB_OUTPUT
          echo "DOWNLOAD_URL_7ZR=$($latest7zr.DownloadUrl)" >> $env:GITHUB_OUTPUT
          echo "DOWNLOAD_URL_UPX=$($latestUpx.DownloadUrl)" >> $env:GITHUB_OUTPUT
          echo "NEED_7ZR_UPDATE=$need7zrUpdate" >> $env:GITHUB_OUTPUT
          echo "NEED_UPX_UPDATE=$needUpxUpdate" >> $env:GITHUB_OUTPUT
          echo "NEED_ANY_UPDATE=$needAnyUpdate" >> $env:GITHUB_OUTPUT

      - name: Create tools directory
        if: steps.versions.outputs.NEED_ANY_UPDATE == 'True'
        run: |
          New-Item -ItemType Directory -Force -Path "${{ env.TOOLS_DIR }}" | Out-Null
          Write-Host "üìÅ Directorio ${{ env.TOOLS_DIR }} listo"

      - name: Update tools
        if: steps.versions.outputs.NEED_ANY_UPDATE == 'True'
        run: |
          # Funci√≥n para descargar y actualizar herramienta
          function Update-Tool {
            param($Name, $DownloadUrl, $TargetPath, $IsZip = $false)
            
            $tempFile = "temp_$Name" + $(if($IsZip) { ".zip" } else { ".exe" })
            
            try {
              Write-Host "üì• Descargando $Name..."
              Invoke-WebRequest -Uri $DownloadUrl -OutFile $tempFile -UserAgent "RealViewOn-UpdateBot"
              
              if ($IsZip) {
                # Extraer ZIP y buscar espec√≠ficamente upx.exe
                $extractDir = "temp_${Name}_extract"
                Expand-Archive -Path $tempFile -DestinationPath $extractDir -Force
                
                # Buscar upx.exe espec√≠ficamente (no recursivo, debe estar en el directorio principal)
                $exePath = Get-ChildItem -Path $extractDir -Name "upx.exe" | Select-Object -First 1
                
                if ($exePath) {
                  $fullPath = Join-Path $extractDir $exePath
                  Copy-Item $fullPath $TargetPath -Force
                  Remove-Item -Recurse -Force $extractDir -ErrorAction SilentlyContinue
                } else {
                  throw "upx.exe no encontrado en el ZIP $tempFile"
                }
              } else {
                # Ejecutable directo (para 7zr.exe)
                Copy-Item $tempFile $TargetPath -Force
              }
              
              # Verificar funcionamiento
              $version = if ($Name -eq "7zr") {
                & $TargetPath 2>&1 | Select-String "7-Zip" | Select-Object -First 1
              } else {
                & $TargetPath --version 2>&1 | Select-String "upx" | Select-Object -First 1
              }
              Write-Host "‚úÖ $Name actualizado: $version"
              
              Remove-Item $tempFile -Force -ErrorAction SilentlyContinue
            } catch {
              Write-Host "‚ùå Error al actualizar $Name : $($_.Exception.Message)"
              Remove-Item $tempFile -Force -ErrorAction SilentlyContinue
              throw
            }
          }
          
          # Actualizar herramientas seg√∫n sea necesario
          if ("${{ steps.versions.outputs.NEED_7ZR_UPDATE }}" -eq "True") {
            Update-Tool "7zr" "${{ steps.versions.outputs.DOWNLOAD_URL_7ZR }}" "${{ env.TOOLS_DIR }}\7zr.exe"
          }
          
          if ("${{ steps.versions.outputs.NEED_UPX_UPDATE }}" -eq "True") {
            Update-Tool "upx" "${{ steps.versions.outputs.DOWNLOAD_URL_UPX }}" "${{ env.TOOLS_DIR }}\upx.exe" $true
          }

      - name: Commit changes
        if: steps.versions.outputs.NEED_ANY_UPDATE == 'True'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "${{ env.TOOLS_DIR }}/"
          
          $changes = @()
          if ("${{ steps.versions.outputs.NEED_7ZR_UPDATE }}" -eq "True") {
            $changes += "7zr.exe: ${{ steps.versions.outputs.CURRENT_7ZR_VERSION }} ‚Üí ${{ steps.versions.outputs.LATEST_7ZR_VERSION }}"
          }
          if ("${{ steps.versions.outputs.NEED_UPX_UPDATE }}" -eq "True") {
            $changes += "upx.exe: ${{ steps.versions.outputs.CURRENT_UPX_VERSION }} ‚Üí ${{ steps.versions.outputs.LATEST_UPX_VERSION }}"
          }
          
          $message = "üîß Actualizar herramientas de compresi√≥n`n`n- " + ($changes -join "`n- ") + "`n`nActualizaci√≥n autom√°tica desde GitHub Actions"
          
          if (git status --porcelain) {
            git commit -m $message
            git push origin main
            Write-Host "‚úÖ Cambios enviados al repositorio"
          } else {
            Write-Host "‚ÑπÔ∏è No hay cambios para hacer commit"
          }

      - name: Summary
        if: always()
        run: |
          Write-Host "üìã RESUMEN DE ACTUALIZACI√ìN"
          Write-Host "=" * 40
          
          if ("${{ steps.versions.outputs.NEED_ANY_UPDATE }}" -eq "True") {
            Write-Host "üéâ Actualizaciones realizadas:"
            if ("${{ steps.versions.outputs.NEED_7ZR_UPDATE }}" -eq "True") {
              Write-Host "   ‚úÖ 7zr.exe: ${{ steps.versions.outputs.CURRENT_7ZR_VERSION }} ‚Üí ${{ steps.versions.outputs.LATEST_7ZR_VERSION }}"
            }
            if ("${{ steps.versions.outputs.NEED_UPX_UPDATE }}" -eq "True") {
              Write-Host "   ‚úÖ upx.exe: ${{ steps.versions.outputs.CURRENT_UPX_VERSION }} ‚Üí ${{ steps.versions.outputs.LATEST_UPX_VERSION }}"
            }
          } else {
            Write-Host "‚ÑπÔ∏è Herramientas ya actualizadas:"
            Write-Host "   üìã 7zr.exe: ${{ steps.versions.outputs.CURRENT_7ZR_VERSION }}"
            Write-Host "   üìã upx.exe: ${{ steps.versions.outputs.CURRENT_UPX_VERSION }}"
          }
          
          Write-Host ""
          Write-Host "üîó Releases: https://github.com/ip7z/7zip/releases | https://github.com/upx/upx/releases"
