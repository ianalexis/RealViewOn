# Workflow para compilar el proyecto RealViewOn con MSBuild

name: Build RealViewOn

on:
  push:
    branches: ["main"]
    paths:
      - 'include/Version.h'
  pull_request:
    branches: ["main"]
    paths:
      - 'include/Version.h'
  workflow_dispatch:
    inputs:
      wait_for_vt_results:
        description: 'Wait and check VirusTotal analysis results'
        required: false
        default: false
        type: boolean

env:
  SOLUTION_FILE_PATH: RealViewOn.sln
  BUILD_CONFIGURATION: Release

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get compilation timestamp
        id: compilation_time
        run: |
          # Crear el formato similar a getVersionFromDateTime (YYMMDDHHII)
          $compilationCode = Get-Date -Format "yyMMddHHmm"
          Write-Host "🔢 Código de compilación: $compilationCode"
          echo "COMPILATION_CODE=$compilationCode" >> $env:GITHUB_OUTPUT

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Setup Visual Studio components
        uses: microsoft/setup-msbuild@v2
        with:
          msbuild-architecture: x64

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            rtmidi/lib/
            midifile/
          key: ${{ runner.os }}-deps-${{ hashFiles('**/rtmidi/**', '**/midifile/**') }}

      - name: Build x64
        run: |
          msbuild ${{ env.SOLUTION_FILE_PATH }} `
            /p:Configuration=${{ env.BUILD_CONFIGURATION }} `
            /p:Platform=x64 `
            /p:PlatformToolset=ClangCL `
            /p:WindowsTargetPlatformVersion=10.0.22621.0 `
            /p:UseMultiToolTask=true `
            /p:EnforceProcessCountAcrossBuilds=true `
            /maxcpucount `
            /verbosity:minimal

      - name: Test executable exists
        run: |
          $exePath = "x64\Release\RealViewOn.exe"

          if (Test-Path $exePath) {
            Write-Host "✅ Executable found: $exePath"
            Get-Item $exePath | Select-Object Name, Length, LastWriteTime
          } else {
            Write-Host "❌ Executable not found: $exePath"
            exit 1
          }

      - name: Compress with UPX
        run: |
          # Comprimir con UPX si existe
          if (Test-Path "tools\upx.exe") {
            Write-Host "🗜️ Comprimiendo con UPX..."
            $originalSize = (Get-Item "x64\Release\RealViewOn.exe").Length
            Write-Host "Tamaño original: $([math]::Round($originalSize/1KB, 2)) KB"

            & ".\tools\upx.exe" --ultra-brute "x64\Release\RealViewOn.exe"

            if ($LASTEXITCODE -eq 0) {
              $compressedSize = (Get-Item "x64\Release\RealViewOn.exe").Length
              $compressionRatio = [math]::Round((($originalSize - $compressedSize) / $originalSize) * 100, 1)
              Write-Host "✅ Compresión UPX completada"
              Write-Host "Tamaño comprimido: $([math]::Round($compressedSize/1KB, 2)) KB"
              Write-Host "Reducción: $compressionRatio%"
            } else {
              Write-Host "⚠️ Error en compresión UPX, continuando sin comprimir"
            }
          } else {
            Write-Host "⚠️ UPX no encontrado, saltando compresión"
          }

      - name: Get file version and release info
        id: get_version
        run: |
          $exePath = "x64\Release\RealViewOn.exe"
          $versionFile = "include\Version.h"

          # Leer el archivo Version.h para obtener FILE_VERSION_STABLE
          $isStable = $false
          if (Test-Path $versionFile) {
            $versionContent = Get-Content $versionFile -Raw
            if ($versionContent -match '#define FILE_VERSION_STABLE (\d+)') {
              $stableValue = [int]$matches[1]
              $isStable = ($stableValue -eq 1)
              Write-Host "📋 FILE_VERSION_STABLE: $stableValue ($(if($isStable) { 'Stable' } else { 'PreRelease' }))"
            }
          }

          # Determinar emoji y tipo de release
          $emoji = if ($isStable) { "🚀" } else { "🛑" }
          $releaseType = if ($isStable) { "release" } else { "pre-release" }

          try {
            $versionInfo = [System.Diagnostics.FileVersionInfo]::GetVersionInfo($exePath)
            $fileVersion = $versionInfo.FileVersion
            $productVersion = $versionInfo.ProductVersion

            # Usar ProductVersion si existe, si no FileVersion
            $version = if ($productVersion) { $productVersion } else { $fileVersion }

            # Si no hay versión o es 0.0.0.0, usar fecha, hora y commit SHA corto
            if (-not $version -or $version -eq "0.0.0.0") {
              $shortSha = "${{ github.sha }}".Substring(0, 7)
              $version = "$(Get-Date -Format 'yyyy.MM.dd.HHmm')-$shortSha"
            }

            Write-Host "📋 Versión detectada: $version"
            Write-Host "📋 Tipo de release: $releaseType ($emoji)"

            echo "VERSION=$version" >> $env:GITHUB_OUTPUT
            echo "IS_STABLE=$isStable" >> $env:GITHUB_OUTPUT
            echo "EMOJI=$emoji" >> $env:GITHUB_OUTPUT
            echo "RELEASE_TYPE=$releaseType" >> $env:GITHUB_OUTPUT
            echo "RELEASE_NAME=$emoji v$version" >> $env:GITHUB_OUTPUT
          } catch {
            Write-Host "⚠️ No se pudo obtener la versión del archivo, usando timestamp y commit"
            $shortSha = "${{ github.sha }}".Substring(0, 7)
            $version = "$(Get-Date -Format 'yyyy.MM.dd.HHmm')-$shortSha"

            echo "VERSION=$version" >> $env:GITHUB_OUTPUT
            echo "IS_STABLE=$isStable" >> $env:GITHUB_OUTPUT
            echo "EMOJI=$emoji" >> $env:GITHUB_OUTPUT
            echo "RELEASE_TYPE=$releaseType" >> $env:GITHUB_OUTPUT
            echo "RELEASE_NAME=$emoji RealViewOn v$version" >> $env:GITHUB_OUTPUT
          }

      - name: Get changelog since last release
        id: get_changelog
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          Write-Host "📋 Obteniendo changelog detallado desde el último release..."

          # Obtener el último release
          try {
            $headers = @{
              'Authorization' = 'token ${{ secrets.GITHUB_TOKEN }}'
              'Accept' = 'application/vnd.github.v3+json'
            }

            $releases = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases" -Headers $headers -Method Get
            $lastRelease = $releases | Where-Object { $_.tag_name -ne "v${{ steps.get_version.outputs.VERSION }}" } | Select-Object -First 1

            if ($lastRelease) {
              $lastTag = $lastRelease.tag_name
              Write-Host "📋 Último release encontrado: $lastTag"

              # Método corregido: usar git log con array forzado
              Write-Host "📋 Obteniendo commits con método corregido..."
              $commitList = @(git log --pretty=format:"%H|%h|%s" "$lastTag..HEAD")

              Write-Host "📋 Commits encontrados: $($commitList.Count)"
              Write-Host "📋 Tipo de datos: $($commitList.GetType().Name)"
              
              # Mostrar los primeros commits para depuración
              if ($commitList.Count -gt 0) {
                Write-Host "📋 Primeros commits encontrados:"
                for ($i = 0; $i -lt [Math]::Min(3, $commitList.Count); $i++) {
                  Write-Host "  $($i + 1). $($commitList[$i])"
                }
              }

              if ($commitList -and $commitList.Count -gt 0) {
                Write-Host "� Commits encontrados: $($commitList.Length)"
                $validCommits = @()

                foreach ($commitLine in $commitList) {
                  if ($commitLine -and $commitLine.Trim() -ne "") {
                    $parts = $commitLine -split '\|', 3
                    if ($parts.Length -ge 3) {
                      $fullHash = $parts[0].Trim()
                      $shortHash = $parts[1].Trim()
                      $subject = $parts[2].Trim()

                      Write-Host "🔍 Procesando commit $shortHash : $subject"

                      # Obtener el cuerpo completo del commit específico
                      $commitBody = git log -1 --pretty=format:"%b" $fullHash
                      
                      # Manejar casos donde el cuerpo es un array
                      if ($commitBody -is [array]) {
                        $commitBody = $commitBody -join "`n"
                      }

                      if ($commitBody -and $commitBody.Trim() -ne "") {
                        Write-Host "  📄 Body encontrado: $($commitBody.Length) caracteres"
                        Write-Host "  📄 Body preview: $($commitBody.Substring(0, [Math]::Min(200, $commitBody.Length)))"
                      } else {
                        Write-Host "  📄 No hay cuerpo para este commit"
                      }

                      # Escapar caracteres especiales
                      $subject = $subject -replace '"', '\"' -replace '`', '\`'
                      $commitBody = $commitBody -replace '"', '\"' -replace '`', '\`'

                      # Construir entrada del changelog
                      $commitEntry = "- [$shortHash] $subject"

                      if ($commitBody -and $commitBody.Trim() -ne "") {
                        # Dividir el cuerpo en líneas preservando estructura original
                        $bodyLines = $commitBody -split "`n"
                        if ($bodyLines.Length -gt 0) {
                          $commitEntry += "`n"
                          foreach ($line in $bodyLines) {
                            $cleanLine = $line.Trim()
                            # Procesar líneas que no están vacías
                            if ($cleanLine -ne "") {
                              # Si la línea ya comienza con '-', mantenerla como está con indentación
                              if ($cleanLine.StartsWith('-')) {
                                $commitEntry += "  $cleanLine`n"
                              } elseif ($cleanLine.StartsWith('*')) {
                                # Mantener viñetas con asterisco
                                $commitEntry += "  $cleanLine`n"
                              } elseif ($cleanLine.StartsWith('•')) {
                                # Mantener viñetas con bullet
                                $commitEntry += "  $cleanLine`n"
                              } elseif ($cleanLine -match '^\d+\.') {
                                # Mantener listas numeradas
                                $commitEntry += "  $cleanLine`n"
                              } else {
                                # Para texto normal, agregar guión
                                $commitEntry += "  - $cleanLine`n"
                              }
                            } else {
                              # Preservar líneas vacías que pueden ser importantes para separar secciones
                              if ($line -eq "") {
                                $commitEntry += "`n"
                              }
                            }
                          }
                        }
                      }

                      $validCommits += $commitEntry
                      Write-Host "  ✅ Commit $shortHash procesado, entrada generada con $($commitEntry.Length) caracteres"
                    } else {
                      Write-Host "  ⚠️ Commit line mal formateada (partes: $($parts.Length)): $commitLine"
                    }
                  } else {
                    Write-Host "  ⚠️ Línea de commit vacía: '$commitLine'"
                  }
                }
                
                Write-Host "📋 Total de commits válidos procesados: $($validCommits.Count)"

                if ($validCommits.Length -gt 0) {
                  $changelogText = $validCommits -join "`n`n"
                  Write-Host "📋 Changelog detallado generado con $($validCommits.Length) commits"
                  Write-Host "📋 Tamaño total del changelog: $($changelogText.Length) caracteres"

                  # Mostrar preview del changelog para depuración
                  Write-Host "📋 Preview del changelog:"
                  Write-Host "--- INICIO CHANGELOG ---"
                  Write-Host $changelogText.Substring(0, [Math]::Min(800, $changelogText.Length))
                  if ($changelogText.Length -gt 800) {
                    Write-Host "... (truncado, total: $($changelogText.Length) chars)"
                  }
                  Write-Host "--- FIN CHANGELOG ---"
                } else {
                  Write-Host "📋 No se generaron commits válidos, usando commit actual"
                  $currentCommit = "${{ github.event.head_commit.message }}"
                  $currentSha = "${{ github.sha }}".Substring(0, 7)
                  $changelogText = "- [$currentSha] $currentCommit"
                }
              } else {
                Write-Host "📋 No se encontraron commits, usando commit actual"
                $currentCommit = "${{ github.event.head_commit.message }}"
                $currentSha = "${{ github.sha }}".Substring(0, 7)
                $changelogText = "- [$currentSha] $currentCommit"
              }
            } else {
              Write-Host "📋 No se encontró release anterior, usando commit actual"
              $currentCommit = "${{ github.event.head_commit.message }}"
              $currentSha = "${{ github.sha }}".Substring(0, 7)
              $changelogText = "- [$currentSha] $currentCommit"
            }

            # Limpiar el changelog text para evitar problemas con caracteres especiales
            $changelogText = $changelogText -replace "`r`n", "`n"
            $changelogText = $changelogText -replace "`r", "`n"

            # Escribir el changelog usando un método más seguro
            $changelogPath = "changelog_temp.txt"
            $changelogText | Out-File -FilePath $changelogPath -Encoding utf8 -NoNewline
            $changelogContent = Get-Content -Path $changelogPath -Raw
            Remove-Item -Path $changelogPath -Force

            echo "CHANGELOG<<EOF" >> $env:GITHUB_OUTPUT
            echo $changelogContent >> $env:GITHUB_OUTPUT
            echo "EOF" >> $env:GITHUB_OUTPUT

          } catch {
            Write-Host "⚠️ Error al obtener changelog: $($_.Exception.Message)"
            Write-Host "📋 Usando commit actual como fallback"
            $currentCommit = "${{ github.event.head_commit.message }}"
            $currentSha = "${{ github.sha }}".Substring(0, 7)
            $fallbackText = "- [$currentSha] $currentCommit"
            echo "CHANGELOG<<EOF" >> $env:GITHUB_OUTPUT
            echo $fallbackText >> $env:GITHUB_OUTPUT
            echo "EOF" >> $env:GITHUB_OUTPUT
          }

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: RealViewOn-x64-${{ env.BUILD_CONFIGURATION }}
          path: |
            x64/Release/RealViewOn.exe
            x64/Release/*.pdb
            release-assets/RealViewOn.7z
            release-assets/RealViewOn.zip
          if-no-files-found: ignore

      - name: Prepare release assets
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          # Crear directorio de staging para assets
          New-Item -ItemType Directory -Force -Path "release-assets"
          Copy-Item "x64\Release\RealViewOn.exe" "release-assets\RealViewOn.exe"

          Write-Host "📦 Asset preparado para release: release-assets\RealViewOn.exe"
          Get-Item "release-assets\RealViewOn.exe" | Select-Object Name, Length, LastWriteTime

          # Comprimir con 7zip si está disponible
          if (Test-Path "tools\7zr.exe") {
            Write-Host "📦 Comprimiendo con 7zip..."
            $originalSize = (Get-Item "release-assets\RealViewOn.exe").Length
            Write-Host "Tamaño del ejecutable: $([math]::Round($originalSize/1KB, 2)) KB"

            # Crear archivo 7z con compresión máxima compatible con 7zr.exe
            # Usando solo parámetros básicos garantizados para 7zr.exe:
            # -mx=9: Nivel máximo de compresión
            # -md=1m: Diccionario de 1MB (óptimo para archivos de ~200KB)
            # -ms=on: Solid archive activado
            Write-Host "🗜️ Aplicando compresión 7z máxima compatible con 7zr.exe..."
            & ".\tools\7zr.exe" a -t7z -mx=9 -md=1m -ms=on "release-assets\RealViewOn.7z" "release-assets\RealViewOn.exe"

            if ($LASTEXITCODE -eq 0) {
              $compressedSize = (Get-Item "release-assets\RealViewOn.7z").Length
              $compressionRatio = [math]::Round((($originalSize - $compressedSize) / $originalSize) * 100, 1)
              Write-Host "✅ Compresión 7zip completada"
              Write-Host "Tamaño comprimido: $([math]::Round($compressedSize/1KB, 2)) KB"
              Write-Host "Reducción: $compressionRatio%"
            } else {
              Write-Host "⚠️ Error en compresión 7zip, continuando..."
            }

            # Crear archivo ZIP usando PowerShell (7zr.exe no soporta ZIP)
            Write-Host "📦 Comprimiendo con ZIP usando PowerShell..."
            try {
              Compress-Archive -Path "release-assets\RealViewOn.exe" -DestinationPath "release-assets\RealViewOn.zip" -CompressionLevel Optimal -Force

              $zipSize = (Get-Item "release-assets\RealViewOn.zip").Length
              $zipRatio = [math]::Round((($originalSize - $zipSize) / $originalSize) * 100, 1)
              Write-Host "✅ Compresión ZIP completada"
              Write-Host "Tamaño ZIP: $([math]::Round($zipSize/1KB, 2)) KB"
              Write-Host "Reducción ZIP: $zipRatio%"
            } catch {
              Write-Host "⚠️ Error en compresión ZIP: $($_.Exception.Message)"
            }
          } else {
            Write-Host "⚠️ 7zip no encontrado, solo se subirá el ejecutable"
          }

      - name: Check and manage existing release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: check_release
        run: |
          $tagName = "v${{ steps.get_version.outputs.VERSION }}"
          Write-Host "🔍 Verificando si existe el release: $tagName"

          $headers = @{
            'Authorization' = 'token ${{ secrets.GITHUB_TOKEN }}'
            'Accept' = 'application/vnd.github.v3+json'
          }

          try {
            $response = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases/tags/$tagName" -Headers $headers -Method Get
            Write-Host "⚠️ El release $tagName ya existe (ID: $($response.id))"

            # Eliminar assets existentes si existen
            $assetsToDelete = @("RealViewOn.exe", "RealViewOn.7z", "RealViewOn.zip")
            foreach ($assetName in $assetsToDelete) {
              $existingAsset = $response.assets | Where-Object { $_.name -eq $assetName }
              if ($existingAsset) {
                Write-Host "🗑️ Eliminando asset existente: $($existingAsset.name)"
                try {
                  Invoke-RestMethod -Uri $existingAsset.url -Headers $headers -Method Delete
                  Write-Host "✅ Asset $assetName eliminado"
                } catch {
                  Write-Host "⚠️ No se pudo eliminar el asset $assetName : $($_.Exception.Message)"
                }
              }
            }

            echo "EXISTS=true" >> $env:GITHUB_OUTPUT
            echo "RELEASE_ID=$($response.id)" >> $env:GITHUB_OUTPUT
            echo "UPLOAD_URL=$($response.upload_url -replace '\{\?.*\}', '')" >> $env:GITHUB_OUTPUT
          } catch {
            if ($_.Exception.Response.StatusCode -eq 404) {
              Write-Host "✅ El release $tagName no existe, se creará uno nuevo"
              echo "EXISTS=false" >> $env:GITHUB_OUTPUT
            } else {
              Write-Host "❌ Error al verificar el release: $($_.Exception.Message)"
              throw
            }
          }

      - name: Create or update GitHub Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: release
        run: |
          $tagName = "v${{ steps.get_version.outputs.VERSION }}"
          $releaseName = "${{ steps.get_version.outputs.RELEASE_NAME }}"
          $isStable = "${{ steps.get_version.outputs.IS_STABLE }}" -eq "True"
          $emoji = "${{ steps.get_version.outputs.EMOJI }}"
          $releaseType = "${{ steps.get_version.outputs.RELEASE_TYPE }}"

          $headers = @{
            'Authorization' = 'token ${{ secrets.GITHUB_TOKEN }}'
            'Accept' = 'application/vnd.github.v3+json'
            'Content-Type' = 'application/json'
          }

          # Crear cuerpo del release
          $titlePrefix = if ($isStable) { "RealViewOn Release" } else { "$emoji RealViewOn Pre-Release" }
          $titleSuffix = if ($isStable) { " $emoji" } else { " $emoji" }

          $releaseBody = @"
          # $titlePrefix v${{ steps.get_version.outputs.VERSION }} (c${{ steps.compilation_time.outputs.COMPILATION_CODE }})$titleSuffix

          ## Downloads 📥
          ⏳ _Download links are being prepared..._

          ## What's Changed
          ${{ steps.get_changelog.outputs.CHANGELOG }}

          ---
          *This is an automated $releaseType generated from the latest commit.*
          "@

          $body = @{
            tag_name = $tagName
            name = $releaseName
            body = $releaseBody
            draft = $false
            prerelease = -not $isStable
          } | ConvertTo-Json -Depth 3

          try {
            if ("${{ steps.check_release.outputs.EXISTS }}" -eq "true") {
              # Actualizar release existente
              $releaseId = "${{ steps.check_release.outputs.RELEASE_ID }}"
              Write-Host "🔄 Actualizando release existente: $tagName (ID: $releaseId) como $releaseType"

              $response = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases/$releaseId" -Headers $headers -Method Patch -Body $body
              echo "UPLOAD_URL=${{ steps.check_release.outputs.UPLOAD_URL }}" >> $env:GITHUB_OUTPUT
            } else {
              # Crear nuevo release
              Write-Host "🆕 Creando nuevo release: $tagName como $releaseType"

              $response = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases" -Headers $headers -Method Post -Body $body
              $uploadUrl = $response.upload_url -replace '\{\?.*\}', ''
              echo "UPLOAD_URL=$uploadUrl" >> $env:GITHUB_OUTPUT
            }

            Write-Host "✅ Release procesado exitosamente como $releaseType"
            echo "RELEASE_ID=$($response.id)" >> $env:GITHUB_OUTPUT
          } catch {
            Write-Host "❌ Error al procesar release: $($_.Exception.Message)"
            throw
          }

      - name: Upload Release Assets
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: upload_assets
        run: |
          $uploadUrl = "${{ steps.release.outputs.UPLOAD_URL }}"
          Write-Host "📤 Subiendo assets al release"

          $headers = @{
            'Authorization' = 'token ${{ secrets.GITHUB_TOKEN }}'
            'Content-Type' = 'application/octet-stream'
          }

          # Lista de assets a subir
          $assets = @(
            @{ Name = "RealViewOn.exe"; Path = "release-assets\RealViewOn.exe"; Required = $true; Description = "🚀 Executable" }
            @{ Name = "RealViewOn.7z"; Path = "release-assets\RealViewOn.7z"; Required = $false; Description = "🗜️ 7-zip archive" }
            @{ Name = "RealViewOn.zip"; Path = "release-assets\RealViewOn.zip"; Required = $false; Description = "📦 Zip archive" }
          )

          $downloadLinks = @()

          foreach ($asset in $assets) {
            $assetName = $asset.Name
            $filePath = $asset.Path
            $isRequired = $asset.Required
            $description = $asset.Description

            if (Test-Path $filePath) {
              try {
                $uploadAssetUrl = "$uploadUrl" + "?name=$assetName"
                Write-Host "📦 Subiendo $assetName..."

                $fileBytes = [System.IO.File]::ReadAllBytes($filePath)
                $fileSizeKB = [math]::Round($fileBytes.Length/1KB, 2)
                Write-Host "   📊 Tamaño: $fileSizeKB KB"

                $response = Invoke-RestMethod -Uri $uploadAssetUrl -Method Post -Headers $headers -Body $fileBytes
                Write-Host "   ✅ $assetName subido exitosamente"
                Write-Host "   🔗 Download URL: $($response.browser_download_url)"
                
                # Agregar link de descarga a la lista
                $downloadLinks += "- **[$assetName]($($response.browser_download_url))** - $description ($fileSizeKB KB)"
                
              } catch {
                Write-Host "   ❌ Error al subir $assetName : $($_.Exception.Message)"
                if ($_.Exception.Response) {
                  Write-Host "   🔍 Status: $($_.Exception.Response.StatusCode) - $($_.Exception.Response.StatusDescription)"
                }
                if ($isRequired) {
                  throw "Error al subir asset requerido: $assetName"
                } else {
                  Write-Host "   ⚠️ Asset opcional $assetName no se pudo subir, continuando..."
                }
              }
            } else {
              if ($isRequired) {
                throw "Asset requerido no encontrado: $filePath"
              } else {
                Write-Host "   ⚠️ Asset opcional no encontrado: $filePath (se omite)"
              }
            }
          }

          Write-Host "🎉 Proceso de subida de assets completado"
          
          # Guardar los enlaces de descarga para el siguiente step
          if ($downloadLinks.Count -gt 0) {
            $downloadsSection = $downloadLinks -join "`n"
            Write-Host "📋 Enlaces de descarga generados:"
            Write-Host $downloadsSection
            
            echo "DOWNLOAD_LINKS<<EOF" >> $env:GITHUB_OUTPUT
            echo $downloadsSection >> $env:GITHUB_OUTPUT
            echo "EOF" >> $env:GITHUB_OUTPUT
          } else {
            Write-Host "⚠️ No se generaron enlaces de descarga"
            echo "DOWNLOAD_LINKS=" >> $env:GITHUB_OUTPUT
          }
          
          # Guardar información de archivos para análisis de VirusTotal
          $assetPaths = @()
          foreach ($asset in $assets) {
            if (Test-Path $asset.Path) {
              $assetPaths += "$($asset.Name)|$($asset.Path)"
            }
          }
          if ($assetPaths.Count -gt 0) {
            $assetPathsString = $assetPaths -join ";"
            echo "ASSET_PATHS=$assetPathsString" >> $env:GITHUB_OUTPUT
          } else {
            echo "ASSET_PATHS=" >> $env:GITHUB_OUTPUT
          }

      - name: Analyze files with VirusTotal
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: analyze_virustotal
        run: |
          Write-Host "🛡️ Enviando archivos a VirusTotal para análisis"
          
          # Verificar si tenemos API key de VirusTotal
          $vtApiKey = "${{ secrets.VIRUSTOTAL_API_KEY }}"
          if (-not $vtApiKey -or $vtApiKey -eq "") {
            Write-Host "⚠️ VIRUSTOTAL_API_KEY no está configurado en los secretos del repositorio"
            Write-Host "📝 Para habilitar el análisis de VirusTotal:"
            Write-Host "   1. Obtén una API key gratuita en https://www.virustotal.com/gui/join-us"
            Write-Host "   2. Ve a Settings > Secrets and variables > Actions en tu repositorio"
            Write-Host "   3. Agrega un nuevo secreto llamado VIRUSTOTAL_API_KEY con tu clave"
            Write-Host "🚫 Saltando análisis de VirusTotal"
            echo "VT_LINKS=" >> $env:GITHUB_OUTPUT
            exit 0
          }

          $headers = @{
            'x-apikey' = $vtApiKey
          }

          # Obtener rutas de archivos del step anterior
          $assetPathsString = "${{ steps.upload_assets.outputs.ASSET_PATHS }}"
          $vtLinks = @{}

          if ($assetPathsString -and $assetPathsString.Trim() -ne "") {
            $assetPairs = $assetPathsString -split ';'
            
            foreach ($pair in $assetPairs) {
              $parts = $pair -split '\|', 2
              if ($parts.Length -eq 2) {
                $fileName = $parts[0]
                $filePath = $parts[1]

                if (Test-Path $filePath) {
                  try {
                    Write-Host "🔍 Analizando $fileName..."
                    
                    # Preparar el archivo para subida
                    $fileBytes = [System.IO.File]::ReadAllBytes($filePath)
                    $fileSizeKB = [math]::Round($fileBytes.Length/1KB, 2)
                    Write-Host "   📊 Tamaño: $fileSizeKB KB"

                    # Verificar límite de tamaño (VirusTotal tiene límite de 650MB para API gratuita)
                    if ($fileBytes.Length -gt 650MB) {
                      Write-Host "   ⚠️ Archivo $fileName es demasiado grande para VirusTotal API gratuita (>650MB)"
                      continue
                    }

                    # Crear boundary para multipart/form-data
                    $boundary = [System.Guid]::NewGuid().ToString()
                    $LF = "`r`n"

                    $bodyLines = @(
                      "--$boundary",
                      "Content-Disposition: form-data; name=`"file`"; filename=`"$fileName`"",
                      "Content-Type: application/octet-stream",
                      "",
                      [System.Text.Encoding]::GetEncoding("iso-8859-1").GetString($fileBytes),
                      "--$boundary--",
                      ""
                    )

                    $body = $bodyLines -join $LF
                    $bodyBytes = [System.Text.Encoding]::GetEncoding("iso-8859-1").GetBytes($body)

                    $uploadHeaders = $headers.Clone()
                    $uploadHeaders['Content-Type'] = "multipart/form-data; boundary=$boundary"

                    # Subir archivo a VirusTotal
                    Write-Host "   📤 Subiendo a VirusTotal..."
                    $uploadResponse = Invoke-RestMethod -Uri "https://www.virustotal.com/api/v3/files" -Method Post -Headers $uploadHeaders -Body $bodyBytes

                    if ($uploadResponse.data.id) {
                      $analysisId = $uploadResponse.data.id
                      $vtUrl = "https://www.virustotal.com/gui/file-analysis/$analysisId"
                      Write-Host "   ✅ $fileName subido exitosamente"
                      Write-Host "   🆔 Analysis ID: $analysisId"
                      Write-Host "   🔗 VirusTotal URL: $vtUrl"
                      
                      # Guardar el enlace de VirusTotal para este archivo
                      $vtLinks[$fileName] = $vtUrl
                    } else {
                      Write-Host "   ❌ Error: Respuesta inesperada de VirusTotal"
                      Write-Host "   📄 Response: $($uploadResponse | ConvertTo-Json -Depth 3)"
                    }

                    # Pequeña pausa entre subidas para no saturar la API
                    Start-Sleep -Seconds 2

                  } catch {
                    Write-Host "   ❌ Error al subir $fileName a VirusTotal: $($_.Exception.Message)"
                    if ($_.Exception.Response) {
                      $responseStream = $_.Exception.Response.GetResponseStream()
                      $reader = New-Object System.IO.StreamReader($responseStream)
                      $responseBody = $reader.ReadToEnd()
                      Write-Host "   📄 Response body: $responseBody"
                    }
                  }
                } else {
                  Write-Host "   ⚠️ Archivo no encontrado: $filePath"
                }
              }
            }
          }

          # Convertir los enlaces de VirusTotal a formato de salida
          if ($vtLinks.Count -gt 0) {
            $vtLinksArray = @()
            foreach ($kvp in $vtLinks.GetEnumerator()) {
              $vtLinksArray += "$($kvp.Key)|$($kvp.Value)"
            }
            $vtLinksString = $vtLinksArray -join ";"
            Write-Host "📝 Enlaces de VirusTotal generados para $($vtLinks.Count) archivos"
            echo "VT_LINKS=$vtLinksString" >> $env:GITHUB_OUTPUT
          } else {
            Write-Host "⚠️ No se generaron enlaces de VirusTotal"
            echo "VT_LINKS=" >> $env:GITHUB_OUTPUT
          }

          Write-Host "🎉 Análisis de VirusTotal completado"

      - name: Update release with download links
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          $downloadLinks = "${{ steps.upload_assets.outputs.DOWNLOAD_LINKS }}"
          $vtLinksString = "${{ steps.analyze_virustotal.outputs.VT_LINKS }}"
          
          if ($downloadLinks -and $downloadLinks.Trim() -ne "") {
            Write-Host "🔗 Actualizando release con enlaces de descarga clicables..."
            
            # Procesar enlaces de VirusTotal si existen
            $vtLinks = @{}
            if ($vtLinksString -and $vtLinksString.Trim() -ne "") {
              Write-Host "📋 String de enlaces VT recibido: '$vtLinksString'"
              $vtPairs = $vtLinksString -split ';'
              Write-Host "📋 Pares divididos: $($vtPairs.Count) elementos"
              foreach ($pair in $vtPairs) {
                Write-Host "📋 Procesando par: '$pair'"
                $parts = $pair -split '\|', 2
                if ($parts.Length -eq 2) {
                  $fileName = $parts[0].Trim()
                  $vtUrl = $parts[1].Trim()
                  $vtLinks[$fileName] = $vtUrl
                  Write-Host "   ✅ Agregado: $fileName -> $vtUrl"
                } else {
                  Write-Host "   ⚠️ Par mal formateado: '$pair' (partes: $($parts.Length))"
                }
              }
              Write-Host "📋 Enlaces de VirusTotal encontrados para $($vtLinks.Count) archivos"
              foreach ($kvp in $vtLinks.GetEnumerator()) {
                Write-Host "   - $($kvp.Key): $($kvp.Value)"
              }
            } else {
              Write-Host "📋 No hay enlaces de VirusTotal disponibles"
            }
            
            # Agregar enlaces de VirusTotal a cada línea de descarga
            $updatedDownloadLinks = @()
            $downloadLinesArray = $downloadLinks -split "`n" | Where-Object { $_.Trim() -ne "" }
            
            Write-Host "📋 Procesando $($downloadLinesArray.Count) líneas de descarga..."
            
            foreach ($line in $downloadLinesArray) {
              $updatedLine = $line.Trim()  # Eliminar espacios y saltos de línea adicionales
              Write-Host "📋 Procesando línea: $updatedLine"
              
              # Buscar el nombre del archivo en la línea para agregar el enlace de VirusTotal
              $vtLinkAdded = $false
              foreach ($fileName in $vtLinks.Keys) {
                Write-Host "   🔍 Buscando '$fileName' en la línea..."
                # Usar una búsqueda más simple - buscar si el nombre del archivo está en la línea
                if ($updatedLine.Contains("[$fileName]")) {
                  $vtUrl = $vtLinks[$fileName]
                  $updatedLine = "$updatedLine | [🛡️ VirusTotal]($vtUrl)"
                  Write-Host "   ✅ Agregado enlace VirusTotal para $fileName"
                  $vtLinkAdded = $true
                  break
                }
              }
              
              if (-not $vtLinkAdded -and $vtLinks.Count -gt 0) {
                Write-Host "   ⚠️ No se encontró coincidencia para esta línea"
              }
              
              $updatedDownloadLinks += $updatedLine
            }
            
            $finalDownloadLinks = $updatedDownloadLinks -join "`n"
            
            $tagName = "v${{ steps.get_version.outputs.VERSION }}"
            $releaseId = "${{ steps.release.outputs.RELEASE_ID }}"
            $isStable = "${{ steps.get_version.outputs.IS_STABLE }}" -eq "True"
            $emoji = "${{ steps.get_version.outputs.EMOJI }}"
            $releaseType = "${{ steps.get_version.outputs.RELEASE_TYPE }}"
            
            $headers = @{
              'Authorization' = 'token ${{ secrets.GITHUB_TOKEN }}'
              'Accept' = 'application/vnd.github.v3+json'
              'Content-Type' = 'application/json'
            }

            try {
              # Obtener el release actual
              $currentRelease = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases/$releaseId" -Headers $headers -Method Get
              
              # Recrear el cuerpo del release con los enlaces de descarga
              $titlePrefix = if ($isStable) { "RealViewOn Release" } else { "$emoji RealViewOn Pre-Release" }
              $titleSuffix = if ($isStable) { " $emoji" } else { " $emoji" }
              
              $updatedBody = "# $titlePrefix v${{ steps.get_version.outputs.VERSION }} (c${{ steps.compilation_time.outputs.COMPILATION_CODE }})$titleSuffix`n`n## Downloads 📥`n$finalDownloadLinks`n`n## What's Changed`n${{ steps.get_changelog.outputs.CHANGELOG }}`n`n---`n*This is an automated $releaseType generated from the latest commit.*"
              
              $updateData = @{
                body = $updatedBody
              } | ConvertTo-Json -Depth 3

              # Actualizar el release
              $response = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases/$releaseId" -Headers $headers -Method Patch -Body $updateData
              
              Write-Host "✅ Release actualizado con enlaces de descarga clicables y VirusTotal"
              Write-Host "🔗 Release URL: $($response.html_url)"
            } catch {
              Write-Host "❌ Error al actualizar release con enlaces de descarga: $($_.Exception.Message)"
              # No fallar el workflow por esto, pero es importante registrar el error
              Write-Host "⚠️ El release se creó pero sin enlaces clicables en la descripción"
            }
          } else {
            Write-Host "⚠️ No hay enlaces de descarga para agregar al release"
          }

      - name: Wait and check VirusTotal analysis results (optional)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.event.inputs.wait_for_vt_results == 'true'
        run: |
          Write-Host "⏳ Esperando resultados de análisis de VirusTotal..."
          
          $vtApiKey = "${{ secrets.VIRUSTOTAL_API_KEY }}"
          if (-not $vtApiKey -or $vtApiKey -eq "") {
            Write-Host "⚠️ VIRUSTOTAL_API_KEY no configurado, saltando verificación de resultados"
            exit 0
          }

          $headers = @{
            'x-apikey' = $vtApiKey
          }

          # Esperar 60 segundos para que VirusTotal procese los archivos
          Write-Host "⏱️ Esperando 60 segundos para el procesamiento inicial..."
          Start-Sleep -Seconds 60

          # Lista de análisis a verificar (necesitarías guardar los IDs del step anterior)
          # Por ahora, solo mostramos cómo sería la verificación
          Write-Host "🔍 Para verificar resultados manualmente:"
          Write-Host "   • Ve a los enlaces de VirusTotal en el release"
          Write-Host "   • Los análisis pueden tardar varios minutos en completarse"
          Write-Host "   • VirusTotal analizará con ~70 antivirus diferentes"
          Write-Host ""
          Write-Host "💡 Tip: Puedes agregar este step como un workflow separado"
          Write-Host "    que se ejecute con retraso usando workflow_dispatch"
